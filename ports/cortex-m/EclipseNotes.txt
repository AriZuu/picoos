- Following software is needed to build/debug:

  - Get GCC toolchain. For Linux/FreeBSD/Unix, compile it yourself.
    For windows, this might be ok: https://launchpad.net/gcc-arm-embedded
  - Get MSYS2 for gnu make, git and unix-style tools
    - Setup
    - pacman -Sy
    - pacman --needed -S bash pacman pacman-mirrors msys2-runtime
    - pacman -Su
    - pacman -S make
    - pacman -S git
    - git config --global core.autocrlf true

  - CMSIS library for CPU being used, usually available from
    chip vendor. CMSIS might be part of larger libary,
    for example stm32 has a "peripheral library".
  - Get eclipse version that has C/C++ development support.
    - Add C/C++ GCC Cross Compiler Support after install

- Build under Eclicpse
  - C Project/Makefile project

- Debug setup: GDB proxy
  - Windows & Olimex ARM-USB-TINY-H JTag adapter
    - Install drivers as show in olimex docs
    - OpenOCD from openocd.sourceforge.net

-Debug setup: Eclipse
  - Add C/C++ GDB Hardware Debugging
  - Create openocd.cnf
       source [find interface/olimex-arm-usb-tiny-h.cfg]
       source [find target/stm32f1x.cfg]

  - Add new external tool
    openocd-x75-050.exe -f openocd.cnf

  - New debug configuration from "GDB Hardware Debuggin"
  - GDB command: arm-none-eabi-gdb
  - JTAG Device: TCP/IP, host: localhost, port 3333
  - Debugger startup: Reset, Halt, Load Image, Load Symbols
  - Debugger command windows:
      monitor reset halt
      monitor poll
  - Runtime options:
      monitor reset hal
      break main
      continue
